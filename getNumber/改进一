转换一下思路，不再是逐一检查数是否仅含有2、3或5这3个因子的自然数。而是从这3个因子中构造需要的自然数。
从1开始，分别乘2、3或5来生成整数，这样的问题就变成了如果依次生成丑数。可以用队列来解决
思路：
首先把1作为唯一的元素放进队列，然后不断的从队列的另一段取出元素，分别乘以2、3、5，这样就得到了3个新的元素，然后把它们按照大小顺序放入队列。如果有重复的元素则丢弃。另外有可能新生成的元素小于队列中的元素，要按大小顺序保持。

function getNumber(n) {
  Q <-- nil
  Enqueue(Q, 1)
  while x > 0 do
    x <--Dequeue(Q)
    Unique-Enqueue(Q, 2x)
    Unique-Enqueue(Q, 3x)
    Unique-Enqueue(Q, 5x)
    n <-- n - 1
  return x
}

function Unique-Enqueue(Q, x){
  i <-- 0
  while i < |Q| ∩ |Q|[i] < x do
    i <-- i + 1
  if i < |Q| ∩ x = |Q|[i] then
    return
  Insert(Q, i, x)
} 

在将元素插入队列时，算法需要O(|Q|)的时间找到合适的位置；如果元素存在则直接返回。粗略估计，队列的长度会随着n增加（每取出一个元素，最后插入3个元素），所以总运行时间为O(1+2+3+...+n) = O(n2)