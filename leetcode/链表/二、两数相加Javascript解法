给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

思路：
使用变量来跟踪进位，并从包含最低有效位开始模拟逐位相加的过程。

javascript解法：
执行用时 : 132 ms, 在所有 JavaScript 提交中击败了96.00%的用户
内存消耗 : 38.2 MB, 在所有 JavaScript 提交中击败了75.70%的用户
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    let result = new ListNode(null)
    let newNode = result
    // 进位 0或1
    let carry = 0
    // 加后值
    let val = 0
    
    while(l1 !== null || l2 !== null) {
        let x = l1 !== null ? l1.val : 0
        let y = l2 !== null ? l2.val : 0
        
        val = (x + y + carry) % 10
        carry = Math.floor((x + y + carry) / 10)
        
        newNode.next = new ListNode(val)
        newNode = newNode.next
        
        if(l1 !== null) l1 = l1.next
        if(l2 !== null) l2 = l2.next
    }
    if (carry) {
        newNode.next = new ListNode(carry)
    }
    return result.next
};