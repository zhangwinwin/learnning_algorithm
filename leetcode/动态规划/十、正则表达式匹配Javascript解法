动态规划
/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    if (s == null || s == null) return false;
    
    const slen = s.length+1, plen = p.length+1;
    const dp = new Array(slen);
    for (let i=0; i<slen; i++) {
        dp[i] = new Array(plen);
        for (let j=0; j<plen; j++) {
            dp[i][j] = false;
        }
    }
    
    // 初始化第一个
    dp[0][0] = true;
    
    let curs = 0; // 当前待匹配字符串的第i个字符位置
    let curp = 0; // 当前匹配字符串的第j个字符位置
    let preCurp = 0; // 当前匹配字符串的第j个字符的前一个字符位置
    
    for(let j=2;j<plen;j++){
        if(p[j-1] == '*'){
            dp[0][j] = dp[0][j-2];
        }
    }
    
    for (let i=1; i<slen; i++) {
        for (let j=1; j<plen; j++) {
            curs = s[i-1];
            curp = p[j-1];
            preCurp = p[j-2];
            
            if (curp == '.' || curs == curp) {
                dp[i][j] = dp[i-1][j-1];
            } else if (curp == '*') {
                if (preCurp != '.' && preCurp != curs) {
                    dp[i][j] = dp[i][j-2];
                } else {
                    dp[i][j] = dp[i-1][j-2] || dp[i-1][j] || dp[i][j-2];
                }
            }
        }
    }
    return dp[slen-1][plen-1];
};


自顶向下
/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
执行用时 :76 ms, 在所有 javascript 提交中击败了98.65%的用户
内存消耗 :35.6 MB, 在所有 javascript 提交中击败了32.02%的用户
var isMatch = function(s, p) {
    const slen = s.length, plen = p.length;
    const dp = new Array(slen+1);
    for (let i=0; i<slen+1; i++) {
        dp[i] = new Array(plen+1);
        for (let j=0; j<plen+1; j++) {
            dp[i][j] = false;
        }
    }
    
    dp[slen][plen] = true;
    
    for (let i=slen; i>=0; i--) {
        for (let j=plen-1; j>=0; j--) {
            let first_match = (i<slen && (p.charAt(j) == s.charAt(i) || p.charAt(j) == '.'))
            
            if (j+1 < plen && p.charAt(j+1) == '*') {
                dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j]
            } else {
                dp[i][j] = first_match && dp[i+1][j+1];
            }
        }
    }
     return dp[0][0];
};