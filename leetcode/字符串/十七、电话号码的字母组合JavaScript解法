给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


解法：回溯算法
通过穷举所有可能情况来找到所有解的算法

回溯算法函数backtrack(combination, next_digits)将一个目前已经产生的组合和输入的数字作为参数。如果next_digits为0，则输出。否则，combination+letter。
重复过程 backtrack(combination+letter, next_digits[1:])
/**
 * @param {string} digits
 * @return {string[]}
 */
执行用时 :48 ms, 在所有 javascript 提交中击败了99.92%的用户
内存消耗 :33.6 MB, 在所有 javascript 提交中击败了61.21%的用户
var letterCombinations = function(digits) {
    const phoneMap = new Map([
        ['2', 'abc'],
        ['3', 'def'],
        ['4', 'ghi'],
        ['5', 'jkl'],
        ['6', 'mno'],
        ['7', 'pqrs'],
        ['8', 'tuv'],
        ['9', 'wxyz']
    ]);
    
    let output = [];
    
    function backtrack (combination, next_digits) {
        if (next_digits.length === 0) {
            output.push(combination);
        } else {
            let str = next_digits.substring(0, 1);
            let letters = phoneMap.get(str);
            for (let i=0; i<letters.length; i++) {
                let letter = letters.substring(i, i+1);
                backtrack(combination+letter, next_digits.substring(1))
            }
        }
    }
    
    if (digits.length !== 0) {
        backtrack("", digits);
    }
    return output
};