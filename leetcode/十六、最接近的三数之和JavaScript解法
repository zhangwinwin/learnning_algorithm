给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

解法：排序与双指针
首先进行数组nums排序，时间复杂度是O(nlogn)
遍历数组nums，使用前指针first = i + 1,使用后指针last = nums.length -1;
整个过程遍历n次，双指针为n次，时间复杂度为O(n2)
总时间复杂度O(nlogn) + O(n2) = O(n2)

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
执行用时 :76 ms, 在所有 javascript 提交中击败了95.19%的用户
内存消耗 :34.8 MB, 在所有 javascript 提交中击败了75.11%的用户
var threeSumClosest = function(nums, target) {
    nums.sort((a, b) => (a - b));
    let result = nums[0] + nums[1] + nums[2];
    for (let i=0; i<nums.length; i++) {
        let first = i+1;
        let last = nums.length-1;
        while(first < last) {
            let sum = nums[first] + nums[last] + nums[i];
            if (Math.abs(target-sum) < Math.abs(target-result)) result = sum;
            if (sum > target) last--;
            else if(sum < target) first++;
            else return result;
        }
    }
    return result;
};