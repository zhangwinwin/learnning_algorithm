将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：

L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。

请你实现这个将字符串进行指定行数变换的函数：

string convert(string s, int numRows);
示例 1:

输入: s = "LEETCODEISHIRING", numRows = 3
输出: "LCIRETOESIIGEDHN"
示例 2:

输入: s = "LEETCODEISHIRING", numRows = 4
输出: "LDREOEIIECIHNTSG"
解释:

L     D     R
E   O E   I I
E C   I H   N
T     S     G

1、思路按行排序
按照与逐行读取 Z 字形图案相同的顺序访问字符串

算出：
f(x) = {
  x(2*numRows - 2) + x,
  (x+1)(2*numRows - 2) - i || x(2*numRows - 2) + 1 // i !== 0 && i !== numRows-1 && 2(2*numRows - 2) + i < s.length
}
/**
 * @param {string} s
 * @param {number} numRows
 * @return {string}
 */
行用时 :84 ms, 在所有 javascript 提交中击败了99.64%的用户
内存消耗 :38.3 MB, 在所有 javascript 提交中击败了61.21%的用户
var convert = function(s, numRows) {
    if (numRows === 1) return s;
    let ret = '';
    const len = s.length;
    const cyclen = 2*numRows - 2;
    
    for (let i=0; i<numRows; i++) {
        for (let j=0; j+i<len; j += cyclen) {
            ret = ret.concat(s[j + i]);
            if (i !== 0 && i !== numRows-1 && j+cyclen-i < len) {
                ret = ret.concat(s[j+cyclen-i]);
            }
        }
    }
    return ret
};

2、按行排序
通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。
执行用时 :100 ms, 在所有 javascript 提交中击败了92.95%的用户
内存消耗 :39.3 MB, 在所有 javascript 提交中击败了46.67%的用户
var convert = function(s, numRows) {
    if(numRows === 1) return s;

    const len = Math.min(s.length, numRows);
    const rows = [];
    for(let i = 0; i< len; i++) rows[i] = "";
    let curRow = 0;
    let down = false;

    for(const c of s) {
        rows[curRow] += c;
        if(curRow == 0 || curRow == numRows - 1) down = !down;
        curRow += down ? 1 : -1;
    }

    let result = "";
    for (const row of rows) {
        result += row;
    }
    return result;
};