改进这一算法基于这个事实：对于任何n个非负整数x1,x2,x3,...,xn,如果存在小于n的可用整数，必然存在某个xi不在[0, n)范围内。否则这些整数一定是0,1,2,...,n-1的某个排列，这种情况下，最小的可用整数是n。于是得出结论
minfree(x1,x2,x3,...,xn) <= n

用一个长度为n+1的数组，来标记区间[0,n]内的某个整数是否可用：
function Min-Free(A)
  F <-- [false,false, ... , false] where |F| = n+1
  for ∀x ∈ A do
    if x < n then
      F|x| <-- True
  for i <-- [0,n] do
    if |F| = false then
      return i
其中第2行将标记位数组中的所有值初始化位false，需要O(n)的时间。接着遍历A中所有元素，只要小n，就将相应的标记设置为true，需要O(n)的时间。最后线性查找标记数组中第一个值为false的位置。整个算法的性能是线性时间O(n)

虽然这个方法只需要线性时间，但是它需要O(n)的空间来存储标记

还可以继续优化。每次查找，都要申请长度为n+1的数组；查找结束后，这个数组又被释放掉了，反复的申请和释放会占用不少时间，因此可以预先准备好足够长的数组，然后每次查找都复用它。另外，可以使用二进制的位来保存标记，这样能节省不少空间。

#define N 1000000 // 100万
#define WORD_LENGTH sizeof(int) * 8

void setbit(unsign int* bits, unsign int i)
{
  bits[i / WORD_LENGTH] |= 1 << (i % WORD_LENGTH);
}

int testbit(unsign int* bits, unsign int i)
{
  return bits[i / WORD_LENGTH] & (1 << (i % WORD_LENGTH));
}

unsign int bits[N / WORD_LENGTH+1];

int min_free(int* xs, int n)
{
  int i, len = N / WORD_LENGTH;
  for (i=0; i<len; ++i)
    bits[i] = 0;
  for (i=0; i<n; ++i)
    if (xs[i] < n)
      setbit(bits, xs[i]);
  for (i=0; i<=n; ++i)
    if (!testbit(bits, i))
      return i;
}